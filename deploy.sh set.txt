#!/bin/bash

REPOSITORY=/home/ec2-user/app/step1  -> 프로젝트 디렉토리 주소는 스크립트 내에세 자주 사용하는 값이기 때문에 이를 변수로 저장
				  -> 쉘에서는 타입 없이 선언하여 저장한다, $변수명으로 변수를 사용할 수 있다.
PROJECT_NAME=first-springboot2-webservice

cd $REPOSITORY/$PROJECT_NAME/ 

echo "> git pull"

git pull

echo "> 프로젝트 Build 시작"

./gradlew build  -> 프로젝트 내부의 gradlew로 build를 수행

echo "> step1 디렉토리로 이동"

cd $REPOSITORY

echo "> Build 파일 복사"

cp $REPOSITORY/$PROJECT_NAME/build/libs/*.jar $REPOSITORY/ -> build의 결과물인 jar 파일을 복사해 jar 파일을 모아둔 위치로 복사한다.

echo "> 현재 구동중인 애플리케이션 pid 확인"

CURRENT_PID=$(pgrep -f first-springboot2-webservice*.jar) -> 기존에 수행 중이던 스프링 부트 애플리케이션을 종료, pgrep은 process id만 추출하는 명령어, -f 옵션은 프로세스 이름을 찾는다

echo "현재 구동 중인 애플리케이션 pid: $CURRENT_PID"

if [ -z "$CURRENT_PID" ]; then           -> if ~ else ~ fi : 현재 구동 중인 프로세스가 있는지 없는지를 판단해서 기능을 수행
			          -> process id 값을 보고 프로세스가 있으면 해당 프로세스를 종료
   echo "> 현재 구동 중인 애플리케이션이 없으므로 종료하지 않습니다."
else
        echo "> kill -15 $CURRENT_PID"
        kill -15 $CURRENT_PID
        slepp 5
fi

echo "> 새 애플리케이션 배포"

JAR_NAME=$(ls -tr $REPOSITORY/ | grep jar | tail -n 1) -> 새로 실행할 jar 파일명을 찾는다.
					     -> 여러 jar 파일이 생기기 때문에 tail -n로 가장 나중의 jar 파일(최신 파일)을 변수에 저장

echo "> JAR Name: $JAR_NAME"

nohup java -jar \ -Dspring.config.loaction=classpath:/application.properties,/home/ec2-user/app/application-oauth.properties \ $REPOSITORY/$JAR_NAME 2>&1 & 
		 -Dspring.config.loaction	  -> 스프링 설장 파일 위치를 지정함
					  -> 기본 옵션들을 담고 있는 application.properties과 oauth 설정들을 담고 있는 application-oauth.properties의 위치를 지정
					  -> classpath가 붙으면 jar 안에 있는 resources 디렉토리를 기준으로 경로가 생성된다,
					  -> application-oauth.properties 은 절대경로를 사용합니다. 외부에 파일이 있기 때문이다.					

					  -> 찾은 jar 파일명으로 해당 jar 파일을 nohup으로 실행함
					  -> 스프링 부트의 장점으로 특별히 외장 톰캣을 설치할 필요가 없다
					  -> 내장 톰캣을 사용해 jar 파일만 있으면 바로 웹 애플리케이션 서버 실행 가능
					  -> 일반적으로 java -jar라는 명령어를 사용하지만, 이렇게 하면 사용자가 터미널 접속을 끊을 때 애플리케이션도 같이 종료됨
					  -> 애플리케이션 실행자가 터미널을 종료해도 애플리케이션은 계속 구동될 수 있도록 nohup 명령어를 사용함



